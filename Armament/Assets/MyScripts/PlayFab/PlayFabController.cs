using System.Collections.Generic; using Photon.Pun; using PlayFab; using PlayFab.ClientModels; using PlayFab.Json; using UnityEngine; using UnityEngine.UI; using UnityEngine.SceneManagement;  public class PlayFabController : MonoBehaviour {     public static PlayFabController PFC;      private string userEmail;     private string userPassword;     private string username;     private string displayName;     private bool registering = false;     private CameraAnimationHandler cameraMover;     private SceneManager SM;     public GameObject loginAndRegisterPanel;     public GameObject mainMenuPanel;     public GameObject optionsPanel;     public GameObject matchmakingPanel;     public GameObject friendsPanel;     public GameObject messagesPanel;     public GameObject loginOptionsPanel;     public GameObject registerOptionsPanel;     public GameObject newUserButton;     public GameObject OpenLoginAgain;      private void OnEnable() {         if (PlayFabController.PFC == null) {             PlayFabController.PFC = this;         }         else {              if (PlayFabController.PFC != this) {                 Destroy(this.gameObject);             }         }         DontDestroyOnLoad(this.gameObject);     }      public void Start()     {
        //First deactivate other panels and gray out the register section
        Defocus(mainMenuPanel, false);         Defocus(optionsPanel, false);         Defocus(matchmakingPanel, false);         Defocus(friendsPanel, false);         Defocus(messagesPanel, false);         Defocus(registerOptionsPanel, true);          //Prepare Camera Moving component         cameraMover = GameObject.Find("Main Camera").GetComponent<CameraAnimationHandler>();          //Used currently to counteract the autologin setting         //PlayerPrefs.DeleteAll();          //Note: Setting title Id here can be skipped if you have set the value in Editor Extensions already.         if (string.IsNullOrEmpty(PlayFabSettings.TitleId)) {             PlayFabSettings.TitleId = "E5D9";         }          //If player has signed in before, automatically assign their credentials          if (PlayerPrefs.HasKey("EMAIL")) {             userEmail = PlayerPrefs.GetString("EMAIL");             userPassword = PlayerPrefs.GetString("PASSWORD");             var request = new LoginWithEmailAddressRequest { Email = userEmail, Password = userPassword };             PlayFabClientAPI.LoginWithEmailAddress(request, OnLoginSuccess, OnLoginFailure);         }          else { #if UNITY_ANDROID             var requestAndroid = new LoginWithAndroidDeviceIDRequest { AndroidDeviceId = returnMobileID(), CreateAccount = true };             PlayFabClientAPI.LoginWithAndroidDeviceID(requestAndroid, OnLoginMobileSuccess, OnLoginMobileFailure); #endif #if UNITY_IOS             var requestIOS = new LoginWithIOSDeviceIDRequest { DeviceId = returnMobileID(), CreateAccount = true };             PlayFabClientAPI.LoginWithIOSDeviceID(requestIOS, OnLoginMobileSuccess, OnLoginMobileFailure); #endif         }                    }      public void Update() {
        if (Input.GetKeyDown(KeyCode.UpArrow) == true) {
            cameraMover.MoveUp();         }          if (Input.GetKeyDown(KeyCode.DownArrow) == true)
        {             cameraMover.MoveDown();         }     }

    #region Login 
    //Login section
    public void OnClickLogin() {         //Submit a login request to the server         var request = new LoginWithEmailAddressRequest { Email = userEmail, Password = userPassword };         PlayFabClientAPI.LoginWithEmailAddress(request, OnLoginSuccess, OnLoginFailure);     }      private void OnLoginSuccess(LoginResult result) {         //Log and set player's Email and Password strings for next time         Debug.Log("Login Success for User \"" + username + "\". Display Name: " + displayName);         PlayerPrefs.SetString("EMAIL", userEmail);         PlayerPrefs.SetString("PASSWORD", userPassword);          //Bring Login and register panel out of focus and bring in Main Menu         Defocus(loginAndRegisterPanel, false);         Refocus(mainMenuPanel, false);          //Move the camera to reveal database and launch options         cameraMover.MoveLeft();     }      private void OnLoginFailure(PlayFabError error) {         Debug.Log(error.GenerateErrorReport());     }      private void OnLoginMobileSuccess(LoginResult result) {         Debug.Log("Mobile Login Success for User \"" + username + "\". Display Name: " + displayName);          //Bring Login and register panel out of focus and bring in Main Menu         Defocus(loginAndRegisterPanel, false);         Refocus(mainMenuPanel, false);          //Move the camera to reveal the new input options         cameraMover.MoveLeft();     }      private void OnLoginMobileFailure(PlayFabError error) {         Debug.Log(error.GenerateErrorReport());     }      public void OnClickOpenLoginAgain() {          //Log and set player's Email and Password strings for next time         Debug.Log("Back to login panel");          foreach (Transform child in loginOptionsPanel.transform) {             if (child.gameObject.tag == "InputField") {                 child.GetComponent<InputField>().text = "";             }         }         foreach (Transform child in registerOptionsPanel.transform) {             if (child.gameObject.tag == "InputField") {                 child.GetComponent<InputField>().text = "";             }         }
        //Bring Main Menu out of focus and bring Login/Register Panel
        Defocus(mainMenuPanel, false);         Refocus(loginAndRegisterPanel, false);          //Move the camera to reveal database and launch options         cameraMover.MoveRight();     }

    //Register section
    public void OnClickRegister() {         var registerRequest = new RegisterPlayFabUserRequest { Email = userEmail, Password = userPassword, Username = username, DisplayName = displayName };         PlayFabClientAPI.RegisterPlayFabUser(registerRequest, OnRegisterSuccess, OnRegisterFailure);     }      private void OnRegisterSuccess(RegisterPlayFabUserResult result) {
        //Log and set player's Email and Password strings for next time
        Debug.Log("Registration Success for User \"" + username + "\". Display Name: " + displayName);         PlayerPrefs.SetString("EMAIL", userEmail);         PlayerPrefs.SetString("PASSWORD", userPassword);          //user is not registering anymore         registering = false;          //Bring Login and register panel out of focus and bring in Main Menu         Defocus(loginAndRegisterPanel, false);         Refocus(mainMenuPanel, false);          //Move the camera to reveal the new input options         cameraMover.MoveLeft();     }      private void OnRegisterFailure(PlayFabError error) {         Debug.LogError(error.GenerateErrorReport());     }      void OnDisplayName(UpdateUserTitleDisplayNameResult result) {         Debug.Log(result.DisplayName + " is your new display name");     }      //Setters     public void SetUserEmail(string emailIn) {         userEmail = emailIn;     }      public void SetUserPassword(string passwordIn) {         userPassword = passwordIn;     }      public void SetUsername(string usernameIn) {         username = usernameIn;     }      public void SetDisplayName(string displayNameIn)
    {         displayName = displayNameIn;     }      private static string returnMobileID() {         string deviceID = SystemInfo.deviceUniqueIdentifier;         return deviceID;     }      public void OnClickNewUser() {         if (!registering) {
            Defocus(loginOptionsPanel, true);             Refocus(registerOptionsPanel, true);             registering = true;             newUserButton.GetComponentInChildren<Text>().text = "Already have an account?"; 
        } else {
            Defocus(registerOptionsPanel, true);             Refocus(loginOptionsPanel, true);             registering = false;             newUserButton.GetComponentInChildren<Text>().text = "New User?";         }     }      private void Defocus(GameObject GO, bool dampenColor) {         foreach (Transform child in GO.transform)
        {             if (child.GetComponent<Image>() && dampenColor) {
                var tempColor = child.GetComponent<Image>().color;
                tempColor.a = 0.5f;
                child.GetComponent<Image>().color = tempColor;
            }             if (child.gameObject.tag == "InputField") {                 child.GetComponent<InputField>().enabled = false;             }             if (child.gameObject.tag == "Button") {                 child.GetComponent<Button>().enabled = false;             }
        }     }

    private void Refocus(GameObject GO, bool restoreColor) {         foreach (Transform child in GO.transform)         {             if (child.GetComponent<Image>() && restoreColor) {                 var tempColor = child.GetComponent<Image>().color;                 tempColor.a = 1;                 child.GetComponent<Image>().color = tempColor;             }             if (child.gameObject.tag == "InputField") {                 child.GetComponent<InputField>().enabled = true;             }             if (child.gameObject.tag == "Button") {                 child.GetComponent<Button>().enabled = true;             }         }     }
     #endregion Login 
    #region PlayerStats 
    public int playerKillCount;      //Receive stats from database     void GetStats() {         PlayFabClientAPI.GetPlayerStatistics(             new GetPlayerStatisticsRequest(),             OnGetStatistics,             error => Debug.LogError(error.GenerateErrorReport())         );     }      //Log each stat to the user     void OnGetStatistics(GetPlayerStatisticsResult result)     {         Debug.Log("Received the following Statistics:");         foreach (var eachStat in result.Statistics)         {             Debug.Log("Statistic (" + eachStat.StatisticName + "): " + eachStat.Value);             switch(eachStat.StatisticName) {                 case "PlayerKillCount":                     playerKillCount = eachStat.Value;                     break;             }         }     }      // Build the request object and access the API to update player stats     public void StartCloudUpdatePlayerStats()     {         PlayFabClientAPI.ExecuteCloudScript(new ExecuteCloudScriptRequest()         {             FunctionName = "UpdatePlayerStats", // Arbitrary function name (must exist in the uploaded cloud.js file)             FunctionParameter = new { pKillCount = playerKillCount}, // The parameter provided to your function             GeneratePlayStreamEvent = true, // Optional - Shows this event in PlayStream         }, OnCloudUpdateStats, OnErrorShared);     }       //Code to run when an update stats call is successful     private static void OnCloudUpdateStats(ExecuteCloudScriptResult result)     {         // Cloud Script returns arbitrary results, so you have to evaluate them one step and one parameter at a time         Debug.Log(JsonWrapper.SerializeObject(result.FunctionResult));         JsonObject jsonResult = (JsonObject)result.FunctionResult;         object messageValue;         jsonResult.TryGetValue("messageValue", out messageValue); // note how "messageValue" directly corresponds to the JSON values set in Cloud Script         Debug.Log((string)messageValue);     }      private static void OnErrorShared(PlayFabError error)     {         Debug.Log(error.GenerateErrorReport());     }

    #endregion PlayerStats 
    #region Leaderboard 
    public GameObject leaderboardPanel;     public GameObject listingPrefab;     public Transform listingContainer;      public void GetLeaderboard() {         var requestLeaderboard = new GetLeaderboardRequest { StartPosition = 0, StatisticName = "PlayerKillCount", MaxResultsCount = 20 };         PlayFabClientAPI.GetLeaderboard(requestLeaderboard, OnGetLeaderboard, OnErrorLeaderboard);     }      void OnGetLeaderboard(GetLeaderboardResult result) {         leaderboardPanel.SetActive(true);         foreach(PlayerLeaderboardEntry player in result.Leaderboard) {             GameObject tempListing = Instantiate(listingPrefab, listingContainer);             LeaderboardListing LL = tempListing.GetComponent<LeaderboardListing>();             LL.playerNameText.text = player.DisplayName;             LL.playerScoreText.text = player.StatValue.ToString();             Debug.Log(player.DisplayName + ": " + player.StatValue);         }     }      public void CloseLeaderboardPanel() {         leaderboardPanel.SetActive(false);         for(int i = listingContainer.childCount - 1; i >= 0; i--) {             Destroy(listingContainer.GetChild(i).gameObject);         }     }      void OnErrorLeaderboard(PlayFabError error) {         Debug.LogError(error.GenerateErrorReport());     }      #endregion Leaderboard      #region Friends      string friendUsername;      enum FriendIdType { PlayFabId, Username, Email, DisplayName };      void AddFriend(FriendIdType idType, string friendId)     {         var request = new AddFriendRequest();         switch (idType)         {             case FriendIdType.PlayFabId:                 request.FriendPlayFabId = friendId;                 break;             case FriendIdType.Username:                 request.FriendUsername = friendId;                 break;             case FriendIdType.Email:                 request.FriendEmail = friendId;                 break;             case FriendIdType.DisplayName:                 request.FriendTitleDisplayName = friendId;                 break;         }         // Execute request and update friends when we are done         PlayFabClientAPI.AddFriend(request, result => {             Debug.Log("Friend added successfully!");         }, DisplayPlayFabError);     }      List<FriendInfo> _friends = null;      public void GetFriends()     {         PlayFabClientAPI.GetFriendsList(new GetFriendsListRequest         {             IncludeSteamFriends = false,             IncludeFacebookFriends = false         }, result => {             _friends = result.Friends;             DisplayFriends(_friends); // triggers the UI         }, DisplayPlayFabError);     }      void DisplayFriends(List<FriendInfo> friendsCache) { friendsCache.ForEach(f => Debug.Log(f.Username)); }     void DisplayPlayFabError(PlayFabError error) { Debug.Log(error.GenerateErrorReport()); }     void DisplayError(string error) { Debug.LogError(error); }      public void OnClickAddFriend() {         AddFriend(FriendIdType.Username, friendUsername);     }      public void SetFriendUsername(string value) {         friendUsername = value;     }      //This is a test method     public void OnClickShowFriendsAndLeaderboard() {          //Log and set player's Email and Password strings for next time         Debug.Log("Going to Friends/Leaderboards panel");          //Bring Main Menu out of focus and bring in Options Panel         Defocus(mainMenuPanel, false);         Refocus(optionsPanel, false);          //Move the camera to reveal database and launch options         cameraMover.MoveBack();     }      #endregion Friends } 